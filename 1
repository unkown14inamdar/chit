#include<stdio.h>
#include<conio.h>
int main()
{
	int i,j=0,x,temp,n,a[20];
	printf("Enter the size of array: ");
    scanf("%d", &n);
    printf("Enter elements: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    printf("The original array is: \n");
    for (i = 0; i < n; i++) {
        printf("\t%d", a[i]);
    }
	printf("\n");
    printf("\n");
	for(i=0; i<n; i++)
	{
		temp = a[i];
		j = i-1;
		while(j>=0 && a[j]>temp) {
			a[j+1]=a[j];
			j--;
		}
		a[j+1] = temp;
		printf("\n");
		printf("\n");
		for(x=0; x<n; x++) {
			printf("\t%d",a[x]);	
		}	
	}
	printf("\n");
	printf("\n");
	printf("The sorted array is: \n");
    for (i = 0; i < n; i++)
    {
    	printf("\t%d", a[i]);
	}
	return 0;    
}

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX_STACK_SIZE 100
// Structure to represent a stack
typedef struct {
int items[MAX_STACK_SIZE];
int top;
} Stack;
// Initialize the stack
void initialize(Stack *stack) {
stack->top = -1;
}
// Check if the stack is empty
int isEmpty(Stack *stack) {
return stack->top == -1;
}
// Check if the stack is full
int isFull(Stack *stack) {
return stack->top == MAX_STACK_SIZE - 1;
}
// Push an item onto the stack
void push(Stack *stack, int item) {
if (!isFull(stack)) {
stack->items[++stack->top] = item;
} else {
printf("Stack overflow\n");
exit(1);
}
}
// Pop an item from the stack
int pop(Stack *stack) {
if (!isEmpty(stack)) {
return stack->items[stack->top--];
} else {
printf("Stack underflow\n");
exit(1);
}
}
// Evaluate the postfix expression
int evaluatePostfix(char *expression) {
Stack stack;
initialize(&stack);
int len = strlen(expression);
for (int i = 0; i < len; i++) {
char token = expression[i];
if (isdigit(token)) {
push(&stack, token - '0'); // Convert character to integer and push to stack
} else {
int operand2 = pop(&stack);
int operand1 = pop(&stack);
switch (token) {
case '+':
push(&stack, operand1 + operand2);
break;
case '-':
push(&stack, operand1 - operand2);
break;
case '*':
push(&stack, operand1 * operand2);
break;
case '/':
push(&stack, operand1 / operand2);
break;
}
}
}
return pop(&stack);
}
int main() {
char expression[100];
printf("Enter a postfix expression: ");
scanf("%s", expression);
int result = evaluatePostfix(expression);
printf("Result: %d\n", result);
return 0;
}
